async function clickLocationPreferencesIfPresent(page) {
  try {
    // 1. Ch·ªù ch√≠nh x√°c n√∫t location preference xu·∫•t hi·ªán
    await page.waitForSelector('button[data-qa="location_preference_menu_button"]', { visible: true, timeout: 5000 });

    // 2. Click n√∫t
    await page.click('button[data-qa="location_preference_menu_button"]');
    
    console.log('üç™ ƒê√£ click n√∫t "Location Preferences"');
  } catch (err) {
    console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t "Location Preferences" trong 5 gi√¢y ‚Äî b·ªè qua b∆∞·ªõc n√†y');
  }
}



async function acceptCookiesIfPresent(page, textElm = 'Accept All Cookies', timeoutFind = 5000) {
  try {
    await page.waitForFunction(() => {
    return [...document.querySelectorAll('button')].some(
      btn => btn.innerText.trim().includes('Accept All Cookies')
    );
  }, { timeout: timeoutFind });

  // 2. Click n√∫t ƒë√≥
  await page.evaluate(() => {
    const buttons = [...document.querySelectorAll('button')];
    const acceptBtn = buttons.find(btn => btn.innerText.trim().includes('Accept All Cookies'));
    if (acceptBtn) acceptBtn.click();
  });

  console.log('üç™ ƒê√£ click n√∫t ', 'Accept All Cookies');
} catch (err) {
  console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ', 'Accept All Cookies' ,' trong 5 gi√¢y ‚Äî b·ªè qua b∆∞·ªõc n√†y');
}
}



/**
 * Hover v√†o menu item c√≥ n·ªôi dung text ch√≠nh x√°c, v√≠ d·ª• "Account"
 * @param {object} page - Puppeteer Page instance
 * @param {string} targetText - N·ªôi dung c·∫ßn kh·ªõp ch√≠nh x√°c ƒë·ªÉ hover
 * @param {number} delayMs - Th·ªùi gian ch·ªù sau hover (m·∫∑c ƒë·ªãnh 500ms)
 * @param {string|null} screenshotPath - N·∫øu cung c·∫•p, s·∫Ω ch·ª•p h√¨nh sau khi hover
 */
async function hoverMenuItemByText(page, targetText, delayMs = 500, screenshotPath = null) {
  const menuItems = await page.$$('div[data-qa="menu_item"]');
  let hovered = false;

  for (const el of menuItems) {
    const text = await el.evaluate(el => el.textContent.trim());
    if (text === targetText) {
      await el.hover();
      await new Promise(resolve => setTimeout(resolve, delayMs));
      console.log(`üñ±Ô∏è Hovered menu item: "${targetText}"`);

      if (screenshotPath) {
        await page.screenshot({ path: screenshotPath });
        console.log(`üì∏ Screenshot saved: ${screenshotPath}`);
      }

      hovered = true;
      break;
    }
  }

  if (!hovered) {
    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y menu item v·ªõi n·ªôi dung "${targetText}"`);
  }
}


  await page.evaluate(() => {
    console.log('üñ±Ô∏è Hovering over Account menu');
  const dropdown = document.querySelector('div.HoverDropdownMenu__DropdownMenu-sc-172nfd7-1.jZlTFI');
  if (dropdown) {
    dropdown.style.visibility = 'visible';
    dropdown.style.opacity = '1'; // c·∫ßn n·∫øu trang d√πng opacity ƒë·ªÉ ·∫©n
    dropdown.style.pointerEvents = 'auto'; // ƒë·ªÉ c√≥ th·ªÉ click ƒë∆∞·ª£c
    }
  });